// Generated by view binder compiler. Do not edit!
package com.worksy.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.Chip;
import com.google.android.material.slider.RangeSlider;
import com.google.android.material.textfield.TextInputEditText;
import com.worksy.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BottomSheetJobFilterBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final MaterialButton buttonApply;

  @NonNull
  public final MaterialButton buttonReset;

  @NonNull
  public final Chip chipContract;

  @NonNull
  public final Chip chipEntry;

  @NonNull
  public final Chip chipFullTime;

  @NonNull
  public final Chip chipInternship;

  @NonNull
  public final Chip chipMid;

  @NonNull
  public final Chip chipPartTime;

  @NonNull
  public final Chip chipSenior;

  @NonNull
  public final TextInputEditText editTextLocation;

  @NonNull
  public final RangeSlider sliderSalary;

  private BottomSheetJobFilterBinding(@NonNull NestedScrollView rootView,
      @NonNull MaterialButton buttonApply, @NonNull MaterialButton buttonReset,
      @NonNull Chip chipContract, @NonNull Chip chipEntry, @NonNull Chip chipFullTime,
      @NonNull Chip chipInternship, @NonNull Chip chipMid, @NonNull Chip chipPartTime,
      @NonNull Chip chipSenior, @NonNull TextInputEditText editTextLocation,
      @NonNull RangeSlider sliderSalary) {
    this.rootView = rootView;
    this.buttonApply = buttonApply;
    this.buttonReset = buttonReset;
    this.chipContract = chipContract;
    this.chipEntry = chipEntry;
    this.chipFullTime = chipFullTime;
    this.chipInternship = chipInternship;
    this.chipMid = chipMid;
    this.chipPartTime = chipPartTime;
    this.chipSenior = chipSenior;
    this.editTextLocation = editTextLocation;
    this.sliderSalary = sliderSalary;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static BottomSheetJobFilterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BottomSheetJobFilterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.bottom_sheet_job_filter, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BottomSheetJobFilterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonApply;
      MaterialButton buttonApply = ViewBindings.findChildViewById(rootView, id);
      if (buttonApply == null) {
        break missingId;
      }

      id = R.id.buttonReset;
      MaterialButton buttonReset = ViewBindings.findChildViewById(rootView, id);
      if (buttonReset == null) {
        break missingId;
      }

      id = R.id.chipContract;
      Chip chipContract = ViewBindings.findChildViewById(rootView, id);
      if (chipContract == null) {
        break missingId;
      }

      id = R.id.chipEntry;
      Chip chipEntry = ViewBindings.findChildViewById(rootView, id);
      if (chipEntry == null) {
        break missingId;
      }

      id = R.id.chipFullTime;
      Chip chipFullTime = ViewBindings.findChildViewById(rootView, id);
      if (chipFullTime == null) {
        break missingId;
      }

      id = R.id.chipInternship;
      Chip chipInternship = ViewBindings.findChildViewById(rootView, id);
      if (chipInternship == null) {
        break missingId;
      }

      id = R.id.chipMid;
      Chip chipMid = ViewBindings.findChildViewById(rootView, id);
      if (chipMid == null) {
        break missingId;
      }

      id = R.id.chipPartTime;
      Chip chipPartTime = ViewBindings.findChildViewById(rootView, id);
      if (chipPartTime == null) {
        break missingId;
      }

      id = R.id.chipSenior;
      Chip chipSenior = ViewBindings.findChildViewById(rootView, id);
      if (chipSenior == null) {
        break missingId;
      }

      id = R.id.editTextLocation;
      TextInputEditText editTextLocation = ViewBindings.findChildViewById(rootView, id);
      if (editTextLocation == null) {
        break missingId;
      }

      id = R.id.sliderSalary;
      RangeSlider sliderSalary = ViewBindings.findChildViewById(rootView, id);
      if (sliderSalary == null) {
        break missingId;
      }

      return new BottomSheetJobFilterBinding((NestedScrollView) rootView, buttonApply, buttonReset,
          chipContract, chipEntry, chipFullTime, chipInternship, chipMid, chipPartTime, chipSenior,
          editTextLocation, sliderSalary);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
